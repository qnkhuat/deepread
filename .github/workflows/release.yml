name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-electron:
    name: Build Electron App
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install frontend dependencies
        run: cd frontend && npm install

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install .
          python -m pip install pyinstaller

      - name: Install root dependencies
        run: npm install

      - name: Build application
        run: npm run build:electron
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Rename electron app for distribution
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Find the Squirrel installer and rename it
            find out/make -name "*.exe" -not -path "*/make-*/*" -exec mv {} out/make/DeepRead-App-Windows-${{ github.ref_name }}.exe \;
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # Find the DMG and rename it
            find out/make -name "*.dmg" -exec mv {} out/make/DeepRead-App-macOS-${{ github.ref_name }}.dmg \;
          else
            # Find the deb and rename it
            find out/make -name "*.deb" -exec mv {} out/make/DeepRead-App-Linux-${{ github.ref_name }}.deb \;
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: electron-${{ matrix.os }}
          path: out/make/DeepRead-App-*-${{ github.ref_name }}.*

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install frontend dependencies and build
        run: |
          cd frontend
          npm install

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Update version in pyproject.toml
        run: |
          sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml

      - name: Build Python package
        run: python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: python -m twine upload dist/*

  create-release:
    name: Create GitHub Release
    needs: [build-electron, publish-pypi]
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.RELEASE_TOKEN }}
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            artifacts/electron-macos-latest/DeepRead-App-macOS-${{ github.ref_name }}.dmg
            artifacts/electron-windows-latest/DeepRead-App-Windows-${{ github.ref_name }}.exe
            artifacts/electron-ubuntu-latest/DeepRead-App-Linux-${{ github.ref_name }}.deb
          body: |
            ## DeepRead ${{ github.ref_name }}

            ### Desktop Apps
            - macOS: [DeepRead-App-macOS-${{ github.ref_name }}](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/DeepRead-App-macOS-${{ github.ref_name }}.dmg)
            - Windows: [DeepRead-App-Windows-${{ github.ref_name }}](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/DeepRead-App-Windows-${{ github.ref_name }}.exe)
            - Linux: [DeepRead-App-Linux-${{ github.ref_name }}](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/DeepRead-App-Linux-${{ github.ref_name }}.deb)

            ### PyPI Package
            The package is also available on PyPI:
            ```
            pip install deepread==${{ env.VERSION }}
            ```
