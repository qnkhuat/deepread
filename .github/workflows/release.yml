name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-electron:
    name: Build Electron App
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #os: [macos-latest, windows-latest, ubuntu-latest]
        os: [macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install frontend dependencies
        run: cd frontend && npm install

      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install pyinstaller

      - name: Install root dependencies
        run: npm install

      - name: Build application
        run: npm run build:electron

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: electron-${{ matrix.os }}
          path: dist/*

  build-binary:
    name: Build Binary
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #os: [macos-latest, windows-latest, ubuntu-latest]
        os: [macos-latest]


    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install frontend dependencies
        run: cd frontend && npm install

      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install pyinstaller
          python -m pip install virtualenv

      - name: Build Python executable
        run: npm run build:executable

      - name: Rename executable for distribution
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            mv backend/dist/backend.exe backend/dist/DeepRead-binary-${{ github.ref_name }}.exe
          else
            mv backend/dist/backend backend/dist/DeepRead-binary-${{ github.ref_name }}
            if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
              chmod +x backend/dist/DeepRead-binary-${{ github.ref_name }}
            fi
          fi

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.os }}
          path: backend/dist/DeepRead-binary-${{ github.ref_name }}*

  create-release:
    name: Create GitHub Release
    needs: [build-electron, build-binary]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.RELEASE_TOKEN }}
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            artifacts/electron-macos-latest/**/*
            artifacts/electron-windows-latest/**/*
            artifacts/electron-ubuntu-latest/**/*
            artifacts/binary-macos-latest/**/*
            artifacts/binary-windows-latest/**/*
            artifacts/binary-ubuntu-latest/**/*
          body: |
            ## DeepRead ${{ github.ref_name }}

            ### Electron Apps
            - macOS: [DeepRead-${{ github.ref_name }}.dmg](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/DeepRead-${{ github.ref_name }}.dmg)
            - Windows: [DeepRead-${{ github.ref_name }}.exe](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/DeepRead-${{ github.ref_name }}.exe)
            - Linux: [DeepRead-${{ github.ref_name }}.AppImage](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/DeepRead-${{ github.ref_name }}.AppImage)

            ### Executables
            - macOS: [DeepRead-binary-${{ github.ref_name }}](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/DeepRead-binary-${{ github.ref_name }})
            - Windows: [DeepRead-binary-${{ github.ref_name }}.exe](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/DeepRead-binary-${{ github.ref_name }}.exe)
            - Linux: [DeepRead-binary-${{ github.ref_name }}](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/DeepRead-binary-${{ github.ref_name }})
